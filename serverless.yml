# "org" ensures this Service is used with the correct Serverless Framework Access Key.
org: fenrir
# "app" enables Serverless Framework Dashboard features and sharing them with other Services.
app: apponintment-service
service: appointment-service
frameworkVersion: '4'

provider:
  name: aws
  runtime: nodejs22.x
  region: us-east-1
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:Query
      Resource: !GetAtt AppointmentsTable.Arn
    - Effect: Allow
      Action:
        - sqs:SendMessage
        - sqs:ReceiveMessage
        - sqs:DeleteMessage
        - sqs:GetQueueAttributes
      Resource:
        - !GetAtt SQSQueuePE.Arn
        - !GetAtt SQSQueueCL.Arn
        - !GetAtt AppointmentQueue.Arn
    - Effect: Allow
      Action:
        - sns:Publish
      Resource:
        - !Ref SNSTopicPE
        - !Ref SNSTopicCL
    - Effect: Allow
      Action:
        - events:PutEvents
      Resource: '*'
    - Effect: Allow
      Action:
        - secretsmanager:GetSecretValue
      Resource:
        - 'arn:aws:secretsmanager:${aws:region}:${aws:accountId}:secret:aws-secret-rds-pe-cOOd6b'
        - 'arn:aws:secretsmanager:${aws:region}:${aws:accountId}:secret:aws-secret-rds-cl-lm2gYQ'
  environment:
    SNS_TOPIC_PE_ARN: arn:aws:sns:${aws:region}:${aws:accountId}:SNS_PE
    SNS_TOPIC_CL_ARN: arn:aws:sns:${aws:region}:${aws:accountId}:SNS_CL,
    EVENT_BUS_NAME: AppointmentBus
    RDS_CLUSTER_PE_ARN: arn:aws:rds:${aws:region}:${aws:accountId}:cluster:database-pe
    RDS_SECRET_PE_ARN: arn:aws:secretsmanager:${aws:region}:${aws:accountId}:secret:aws-secret-rds-pe-cOOd6b
    RDS_CLUSTER_CL_ARN: arn:aws:rds:${aws:region}:${aws:accountId}:cluster:database-cl
    RDS_SECRET_CL_ARN: arn:aws:secretsmanager:${aws:region}:${aws:accountId}:secret:aws-secret-rds-cl-lm2gYQ

package:
  individually: true
  exclude:
    - '**/*'
    #- node_modules/**
    #- package-lock.json
    #- package.json
    #- README.md
    #- .git/**
    #- .serverless/** 
    #- serverless.yml 

functions:
  appointment:
    handler: src/handlers/appointment.handler
    package:
      include:
        - src/handlers/appointment.mjs
        - src/services/**
        - src/repositories/**
        - src/models/**
    events:
      - http:
          path: appointments
          method: post
      - http:
          path: appointments/{insuredId}
          method: get
      - sqs:
          arn: !GetAtt AppointmentQueue.Arn

  appointmentPE:
    handler: src/handlers/appointmentPE.handler
    package:
      include:
        - src/handlers/appointmentPE.mjs
        - src/services/**
        - src/repositories/**
        - src/models/**
    events:
      - sqs:
          arn: !GetAtt SQSQueuePE.Arn
      - eventBridge:
          eventBus: !Ref EventBridgeBus
          pattern:
            source:
              - 'appointment.service'
            detail-type:
              - 'AppointmentPE'

  appointmentCL:
    handler: src/handlers/appointmentCl.handler
    package:
      include:
        - src/handlers/appointmentCL.mjs
        - src/services/**
        - src/repositories/**
        - src/models/**
    events:
      - sqs:
          arn: !GetAtt SQSQueueCL.Arn
      - eventBridge:
          eventBus: !Ref EventBridgeBus
          pattern:
            source:
              - 'appointment.service'
            detail-type:
              - 'AppointmentCL'

resources:
  Resources:
    AppointmentsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: Appointments
        AttributeDefinitions:
          - AttributeName: insuredId
            AttributeType: S
          - AttributeName: scheduleId
            AttributeType: N
          - AttributeName: countryISO
            AttributeType: S
          - AttributeName: status
            AttributeType: S
          - AttributeName: date
            AttributeType: S
        KeySchema:
          - AttributeName: insuredId
            KeyType: HASH
          - AttributeName: scheduleId
            KeyType: RANGE
        BillingMode: PAY_PER_REQUEST

        GlobalSecondaryIndexes:
          - IndexName: CountryIndex
            KeySchema:
              - AttributeName: countryISO
                KeyType: HASH
            Projection:
              ProjectionType: ALL
          - IndexName: StatusIndex
            KeySchema:
              - AttributeName: status
                KeyType: HASH
            Projection:
              ProjectionType: ALL
          - IndexName: DateIndex
            KeySchema:
              - AttributeName: date
                KeyType: HASH
            Projection:
              ProjectionType: ALL
        #GlobalSecondaryIndexes:
        #- IndexName: CountryIndex
        #  KeySchema:
        #    - AttributeName: countryISO
        #      KeyType: HASH
        #  Projection:
        #    ProjectionType: ALL

    SNSTopicPE:
      Type: AWS::SNS::Topic
      Properties:
        TopicName: SNS_PE

    SNSTopicCL:
      Type: AWS::SNS::Topic
      Properties:
        TopicName: SNS_CL

    SQSQueuePE:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: SQS_PE

    SQSQueueCL:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: SQS_CL
    
    SQSQueuePEPolicy:
      Type: AWS::SQS::QueuePolicy
      Properties:
        Queues:
          - !Ref SQSQueuePE
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Principal:
                Service: sns.amazonaws.com
              Action: sqs:SendMessage
              Resource: !GetAtt SQSQueuePE.Arn
              Condition:
                ArnEquals:
                  aws:SourceArn: !Ref SNSTopicPE

    SQSQueueCLPolicy:
      Type: AWS::SQS::QueuePolicy
      Properties:
        Queues:
          - !Ref SQSQueueCL
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Principal:
                Service: sns.amazonaws.com
              Action: sqs:SendMessage
              Resource: !GetAtt SQSQueueCL.Arn
              Condition:
                ArnEquals:
                  aws:SourceArn: !Ref SNSTopicCL

    AppointmentQueue:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: AppointmentQueue

    SNSToSQSSubscriptionPE:
      Type: AWS::SNS::Subscription
      Properties:
        TopicArn: !Ref SNSTopicPE
        Protocol: sqs
        Endpoint: !GetAtt SQSQueuePE.Arn

    SNSToSQSSubscriptionCL:
      Type: AWS::SNS::Subscription
      Properties:
        TopicArn: !Ref SNSTopicCL
        Protocol: sqs
        Endpoint: !GetAtt SQSQueueCL.Arn

    EventBridgeBus:
      Type: AWS::Events::EventBus
      Properties:
        Name: AppointmentBus

    EventBridgeRulePE:
      Type: AWS::Events::Rule
      Properties:
        EventBusName: !Ref EventBridgeBus
        EventPattern:
          source:
            - 'appointment.service'
          detail-type:
            - 'AppointmentPE'
        State: ENABLED
        Targets:
          - Arn: !GetAtt SQSQueuePE.Arn
            Id: 'SQS_PE_Target'

    EventBridgeRuleCL:
      Type: AWS::Events::Rule
      Properties:
        EventBusName: !Ref EventBridgeBus
        EventPattern:
          source:
            - 'appointment.service'
          detail-type:
            - 'AppointmentCL'
        State: ENABLED
        Targets:
          - Arn: !GetAtt SQSQueueCL.Arn
            Id: 'SQS_CL_Target'

    EventBridgeRuleToSQS:
      Type: AWS::Events::Rule
      Properties:
        EventBusName: !Ref EventBridgeBus
        EventPattern:
          source:
            - 'appointment.service'
          detail-type:
            - 'AppointmentCompleted'
        State: ENABLED
        Targets:
          - Arn: !GetAtt AppointmentQueue.Arn
            Id: 'AppointmentQueue_Target'
